!alias pogoda embed 
<drac2>
#Basic Setup
syntax=f'{ctx.prefix}{ctx.alias}'
thumb=f'-thumb https://cdn.discordapp.com/attachments/1146201490881519646/1204736156449775646/dune_2872822.png?ex=65d5d0fa&is=65c35bfa&hm=8421b91f065a1f2b8cbca83ef49661c61b57fc1d192dd1038042ac2f53a27e9e&'
footer=f'-footer "{syntax} | komenda dostÄ™pna dla wszystkich"'
JSON = load_json(get_gvar("2ea25da7-f7f6-4859-95ea-3f243c37a0f2")) # Gvar z pogodÄ…

lfm = 1711332000
cyc = 29.53
test = 0*86400 + 0*3600
past_d = 548690 # Kalibracja daty

now = time()
days_passed = int((now + test - lfm) // 86400)
dsf = days_passed % cyc
ttf = int(cyc - dsf)

using(cldr="92fc939b-9a63-4a5e-98b7-9425d4aace0a")
calendar=cldr.get_fantasy_date(days_passed+past_d)

if ttf < 1:
    msg = 'Mamy peÅ‚niÄ™ ksiÄ™Å¼yca! ðŸŒ•'
elif ttf == 1:
    msg = f'PozostaÅ‚ {ttf} dzieÅ„ do peÅ‚ni ksiÄ™Å¼yca.'
elif ttf in [2, 3, 4]:
    msg = f'PozostaÅ‚y {ttf} dni do peÅ‚ni ksiÄ™Å¼yca.'
else:
    msg = f'PozostaÅ‚o {ttf} dni do peÅ‚ni ksiÄ™Å¼yca.'

J = JSON["weather"]
using(Q="57a16594-b5d7-488c-9e2f-bc4b7c24e8a0")
entry = Q.get_next(days_passed, J)

try:
    text = entry['description']
    temp = entry.get('temperature', None)
    if temp is not None:
        return f'embed {thumb} -title "Dywinacja na dziÅ› brzmi nastÄ™pujÄ…co:" -color {color} -f "---\n{text}\n---\n\n{calendar}\nTemperatura: {temp}Â°C\n{msg}" {footer}'
except Exception:
    text = entry
    return f'embed {thumb} -title "Dywinacja na dziÅ› brzmi nastÄ™pujÄ…co:" -color {color} -f "---\n{text}\n---\n\n{calendar}\n{msg}" {footer}'
</drac2>

###

def get_fantasy_date(days_passed):
    months = [
        "Hammer", "Alturiak", "Ches", "Tarsakh", "Mirtul", "Kythorn",
        "Flamerule", "Eleasis", "Eleint", "Marpenoth", "Uktar", "Nightal"
    ]
    holidays = {
        1: "Midwinter",         # after Hammer
        4: "Greengrass",        # after Tarsakh
        7: "Midsummer",         # after Flamerule
        8: "Highharvestide",    # after Eleint
        11: "Feast of the Moon"  # after Uktar
    }
    
    def days_in_year(year):
        return 365 + (1 if year % 4 == 0 else 0)

    # Oblicz rok
    year = 1
    while days_passed >= days_in_year(year):
        days_passed -= days_in_year(year)
        year += 1

    year_days = []
    for i, month in enumerate(months):
        for day in range(1, 31):
            year_days.append((month, day))
        if i + 1 in holidays:
            year_days.append((holidays[i + 1], None))
            if holidays[i + 1] == "Midsummer" and year % 4 == 0:
                year_days.append(("Shieldmeet", None))

    if days_passed < len(year_days):
        month_or_holiday, day = year_days[days_passed]
        if day:
            return f"{day} {month_or_holiday}, roku {year}"
        else:
            return f"{month_or_holiday}, roku {year}"
    else:
        return "WystÄ…piÅ‚ bÅ‚Ä…d"

###