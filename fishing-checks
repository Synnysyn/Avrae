####################
# FISHING CHECKS
####################
def fishing_locate(ch):
    skills = {
        'survival': ch.skills.survival.value,
        'perception': ch.skills.perception.value,
        'investigation': ch.skills.investigation.value,
        'nature': ch.skills.nature.value
    }
    chosen_skill = [skill for skill, value in skills.items() if value == max(skills.values())][0]
    rolled = vroll(ch.skills[chosen_skill].d20())
    return rolled, chosen_skill

def fishing_pull(ch):
    skills = {
        'athletics': ch.skills.athletics.value,
        'acrobatics': ch.skills.sleightOfHand.value,
        'survival': ch.skills.survival.value,
    }
    chosen_skill = [skill for skill, value in skills.items() if value == max(skills.values())][0]
    rolled = vroll(ch.skills[chosen_skill].d20())
    return rolled, chosen_skill

def storage(deposit, ch):
    bag_name = 'Ryby'
    harvest = 1
    bag = load_json(get('bags', []))
    tester=""

    # Flaga do oznaczenia, czy kategoria "Ryby" została znaleziona
    found_bag = False

    # Szukamy kategorii "Ryby" w worku
    for bag_cat in bag:
        tester=bag_cat
        # Porównujemy nazwę kategorii z uwzględnieniem wielkości liter
        if bag_cat[0].lower() == bag_name.lower():
            found_bag = True
            # Dodajemy rybę lub aktualizujemy ilość
            bag_cat[1][deposit] = bag_cat[1].get(deposit, 0) + harvest
            break

    # Jeśli kategoria "Ryby" nie została znaleziona, tworzymy nową
    if not found_bag:
        bag.append([bag_name, {tester: harvest}])
    
    # Zapisujemy zaktualizowaną torbę
    ch.set_cvar('bags', dump_json(bag))