# ARGS - Arguments Total - base number before roll
def rzut(args, total):
    if args[1]=="1" or args[1]=="2":total+=int(args[1])
    c_roll=randint(1, 20)
    total+=c_roll
    return total, c_roll

#Calculates XP needed to lvl up and how much XP should character get on current lvl
def calculate_rp(level):
    exp_table = {1:0,2:300,3:900,4:2700,5:6500,6:14000,7:23000,8:34000,9:48000,10:64000,11:85000,12:100000,13:120000,14:140000,15:165000,16:195000,17:225000,18:265000,19:305000,20:355000}
    rp_reward_table = {(1,4):60,(5,8):150,(9,12):200,(13,16):250,(17,float('inf')):350}
    exp, rp_reward = exp_table.get(level+1,"Invalid level"), "Invalid level"
    for key, val in rp_reward_table.items():
        if key[0] <= level <= key[1]:
            rp_reward = val
            break
    return exp, rp_reward

def metadata(args, ad, c, _attr):
# METADATA - setup
    var_advance = f'P--{ad["name"]}'
    var_char = f'P-{character().name}-{ad["name"]}'
    var_best_v = f'P-best-val-{ad["name"]}'
    var_best_n = f'P-best-name-{ad["name"]}'
    if c.get_metadata(var_advance) == None: c.set_metadata(var_advance, int(ad["threshold"]))
    if c.get_metadata(var_char) == None: c.set_metadata(var_char, 0)
    if c.get_metadata(var_best_v) == None: c.set_metadata(var_best_v, 0)
    if c.get_metadata(var_best_n) == None: c.set_metadata(var_best_n, "")
    c_total = int(c.get_metadata(var_char))
    ad_total = int(c.get_metadata(var_advance))
    best_score = int(c.get_metadata(var_best_v))
    best_char = c.get_metadata(var_best_n)

    if ad_total == 0: return c_total, ad_total, best_char, best_score, "N/A", "N/A"

    # Rzut
    using(R="af8ccfb8-fccd-4b8b-bd04-ebd829d314a0")
    total, rolled = R.rzut(args, _attr)
    c_total += total
    ad_total -= total
    if ad_total <= 0: ad_total = 0
    if c_total > best_score:
        c.set_metadata(var_best_v, c_total)
        c.set_metadata(var_best_n, character().name)
    c.set_metadata(var_char, c_total)
    c.set_metadata(var_advance, ad_total)

    best_char = c.get_metadata(var_best_n)
    best_score = int(c.get_metadata(var_best_v))

    return c_total, ad_total, best_char, best_score, total, rolled

#Changes integer to string with spaces between each three digits
def nr_format(number):
    number_str = str(number)
    part = ""
    for i in range(len(number_str) - 1, -1, -1):
        part = number_str[i] + part
        if (len(part) % 4) == 3 and i != 0:
            part = " " + part
    return part

#gets character, advantage parameter and check type, returns vroll
def roll_stat(ch, a, check_type):
    ct = check_type.lower()
    if ct=="acrobatics":return vroll(ch.skills.acrobatics.d20(base_adv=a))
    if ct=="animal handling":return vroll(ch.skills.animalHandling.d20(base_adv=a))
    if ct=="arcana":return vroll(ch.skills.arcana.d20(base_adv=a))
    if ct=="athletics":return vroll(ch.skills.athletics.d20(base_adv=a))
    if ct=="deception":return vroll(ch.skills.deception.d20(base_adv=a))
    if ct=="history":return vroll(ch.skills.history.d20(base_adv=a))
    if ct=="insight":return vroll(ch.skills.insight.d20(base_adv=a))
    if ct=="intimidation":return vroll(ch.skills.intimidation.d20(base_adv=a))
    if ct=="investigation":return vroll(ch.skills.investigation.d20(base_adv=a))
    if ct=="medicine":return vroll(ch.skills.medicine.d20(base_adv=a))
    if ct=="nature":return vroll(ch.skills.nature.d20(base_adv=a))
    if ct=="perception":return vroll(ch.skills.perception.d20(base_adv=a))
    if ct=="performance":return vroll(ch.skills.performance.d20(base_adv=a))
    if ct=="persuasion":return vroll(ch.skills.persuasion.d20(base_adv=a))
    if ct=="religion":return vroll(ch.skills.religion.d20(base_adv=a))
    if ct=="sleight of hand":return vroll(ch.skills.sleightOfHand.d20(base_adv=a))
    if ct=="stealth":return vroll(ch.skills.stealth.d20(base_adv=a))
    if ct=="survival":return vroll(ch.skills.survival.d20(base_adv=a))
    if ct=="strength":return vroll(ch.skills.strength.d20(base_adv=a))
    if ct=="dexterity":return vroll(ch.skills.dexterity.d20(base_adv=a))
    if ct=="constitution":return vroll(ch.skills.constitution.d20(base_adv=a))
    if ct=="intelligence":return vroll(ch.skills.intelligence.d20(base_adv=a))
    if ct=="wisdom":return vroll(ch.skills.wisdom.d20(base_adv=a))
    if ct=="charisma":return vroll(ch.skills.charisma.d20(base_adv=a))

    if ct=="str save":return vroll(ch.saves.get("str").d20(base_adv=a))
    if ct=="dex save":return vroll(ch.saves.get("dex").d20(base_adv=a))
    if ct=="con save":return vroll(ch.saves.get("con").d20(base_adv=a))
    if ct=="int save":return vroll(ch.saves.get("int").d20(base_adv=a))
    if ct=="wis save":return vroll(ch.saves.get("wis").d20(base_adv=a))
    if ct=="cha save":return vroll(ch.saves.get("char").d20(base_adv=a))



# Runs encounter, needs character, encounter and if players have advantage, returns description and text
def run_enc(ch, encounter, advantage):
    desc = f"{encounter['opis']}"
    DC = roll(encounter['DC'])
    check_type = encounter['check_type']
    
    typ = encounter['typ'].lower()
    win = encounter['win']
    lose = encounter['lose']

    if DC==0: return desc, ""

    using(R="e38d905e-d075-4924-8c5c-17a9ffd888f6")
    result = R.roll_stat(ch, advantage, check_type)
    result_val = result.total
    reward = vroll(encounter['reward'])

    desc += f" Musisz zdać **{check_type.upper()} DC{DC}**!\n"
    desc += f"\nTwój rzut: {result}"
    if result_val >= DC and typ=="coin":return desc, f"*{win}*\nWartość łupu: **{reward.total} GP** :coin:"
    if result_val >= DC and typ=="heal":return desc, f"*{win}*\n**Leczenie:** {reward} HP :mending_heart:\n{ch.name}: <{ch.modify_hp(reward.total, overflow=False)}>"
    if result_val >= DC:return desc, f"*{win}*"
    if result_val < DC and typ=="damage":return desc, f"*{lose}*\n**Obrażenia:** {reward} HP :broken_heart:\n{ch.name}: <{ch.modify_hp(-reward.total)}>"
    if result_val < DC:return desc, f"*{lose}*"